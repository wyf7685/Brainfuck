# 遍历输出 [2,$0] 的素数
# >>+++++[<++++[<+++++>-]>-]<<  # $0=100
# ---- # $0=65536-4
{bf/read_num.bf}

>+<  # $1=1
-[- # 循环$0次
  >+<  # $1++
  >>[-]+<<  # $2=true (isPrime)

  ## for ($4=2; $3=($4<$1); $4++)
  >>>+<<<  # $3=true
  >>>>[-]++<<<<  # $4=2
  >>>[  # while $3
    [-]<<<  # $3=false

    >>>> [->+>+<<]>>[-<<+>>]<< <<<<  # 复制$4到$5 : $6
    > [->>>>>+>+<<<<<<]>>>>>>[-<<<<<<+>>>>>>]<<<<<< <  # 复制$1到$6 : $7
    >>>>>  ## 判断 $5<$6 开始
      # 缩进内$+5
      {bf/less_than_v2.bf}  # 调用函数 less_than
      # 计算结束, 结果为$0
    <<<<<  ## 判断 $5<$6 结束, 结果为$5
    >>>>>[-<<+>>]<<<<<  # $3=$5, $5=0
    
    ## 取余运算
    > [->>>>+>+<<<<<]>>>>>[-<<<<<+>>>>>]<<<<< <  # 复制$1到$5 : $6
    >>>> [->>+>+<<<]>>>[-<<<+>>>]<<< <<<<  # 复制$4到$6 : $7
    >>>>>  ## 计算 $5 % $6 开始
      # 缩进内 $+5
      # 计算 $0 % $1
      {bf/mod.bf}  # 调用函数 mod
      # 计算结束, 取余结果为$0
    <<<<<  ## 计算 $5 % $6 结束, 结果为 $5

    ## $6: 标记 $1 是否为素数
    ## if $6=($5 == 0 && $3) $3=$2=0
    >>>>>> [-]+<[[-]>-<] <<<<<  # $6 = ($5==0), $5=0
    >>> [->>+>>+<<<<]>>>>[-<<<<+>>>>]<<<< <<<  # 复制$3到$5 : $7
    >>>>>>> [-]+<<[[-]>>-<<] <<<<<  # $7 = !$5, $5=0
    >>>>>>> [[-]<[-]>] <<<<<<<  # $6 = ($6 && !$7), $7=0

    >>>>>>[  # if $6
      [-]<<<<<<  # $6=false
      >>[-]>[-]<<<  # $3=false, $2=false
    >>>>>>] <<<<<<  # 判断复位$6

    >>>>+<<<<  # $4++
  >>>] <<<  # 循环复位$3

  >>>[-]>[-]>[-]>[-]<<<<<<  # $(3-6)=0

  >>[  # if $2 (isPrime)
    [-]<<  # $2=false
    > [->>+>+<<<]>>>[-<<<+>>>]<<< <  # 复制$1到$3 : $4
    >>> # 输出数值 $3 开始
      # 缩进内 $+3
      {bf/print_num.bf}  # 调用函数 print_num
    <<< # 输出数值 $3 结束

    >>> [-]>++++[<++++++++>-]<.[-] <<<  # 输出0x20(空格) : $3
  >>] <<  # 判断复位$2

] <  # 循环复位$0
